[gcode_macro _Sensorless_Homing_Variables]
description: Variables for sensorless homing
gcode:
variable_homing_current: 0.0
variable_clear_time: 1
variable_x_backoff_distance: 10
variable_y_backoff_distance: 10
variable_z_hop_distance: -10
variable_first_homed_axis: 'X'
variable_second_homed_axis: 'X'
variable_safe_z_enable: True
variable_safe_x: -128
variable_safe_y: -128
variable_axis_correction_state: True

[gcode_macro _SET_AXIS_CURRENT]
description: Set TMC current for a given axis group
gcode:
    {% set s = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set homing_current = s.homing_current | float %}
    {% set mode = params.MODE|string %}
    {% for stepper in params.AXES.split(',') %}
        {% if mode == 'homing' and homing_current != 0.0 %}
            SET_TMC_CURRENT STEPPER=stepper_{stepper|lower} CURRENT={homing_current}
        {% elif mode == 'run' %}
            {% set tmc = 'tmc'+stepper|lower %}
            {% if tmc in printer.configfile.settings %}
                {% set run_current = printer.configfile.settings[tmc].run_current %}
                SET_TMC_CURRENT STEPPER=stepper_{stepper|lower} CURRENT={run_current}
            {% endif %}
        {% endif %}
    {% endfor %}

[gcode_macro _TOGGLE_AXIS_CORRECTION_IF_NEEDED]
description: Enables/disables axis correction only if state differs from requested
gcode:
    {% set s = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set enable = params.ENABLE|int %}
    {% set flag = s.axis_correction_state %}
    {% if enable and not flag %}
        SET_AXIS_CORRECTION ENABLE=1
        SET_GCODE_VARIABLE MACRO=_Sensorless_Homing_Variables VARIABLE=axis_correction_state VALUE=True
    {% elif not enable and flag %}
        SET_AXIS_CORRECTION ENABLE=0
        SET_GCODE_VARIABLE MACRO=_Sensorless_Homing_Variables VARIABLE=axis_correction_state VALUE=False
    {% endif %}

[gcode_macro _HOME_X]
gcode:
    {% set manage_scaling = params.MANAGE_SCALING|default(1)|int %}
    {% if manage_scaling %}
        _TOGGLE_AXIS_CORRECTION_IF_NEEDED ENABLE=0
    {% endif %}
    {% set s = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set stepper = printer.configfile.settings.stepper_x %}
    _SET_AXIS_CURRENT AXES=X MODE=homing
    G4 P{ s.clear_time * 1000 }
    G28 X
    {% if s.x_backoff_distance|float > 0 %}
        G91
        {% if stepper.homing_positive_dir | abs %}
            G0 X-{s.x_backoff_distance} F{stepper.homing_speed*60}
        {% else %}
            G0 X{s.x_backoff_distance} F{stepper.homing_speed*60}
        {% endif %}
        G90
    {% endif %}
    _SET_AXIS_CURRENT AXES=X MODE=run
    G4 P{ s.clear_time * 1000 }
    {% if manage_scaling %}
        _TOGGLE_AXIS_CORRECTION_IF_NEEDED ENABLE=1
    {% endif %}

[gcode_macro _HOME_Y]
gcode:
    {% set manage_scaling = params.MANAGE_SCALING|default(1)|int %}
    {% if manage_scaling %}
        _TOGGLE_AXIS_CORRECTION_IF_NEEDED ENABLE=0
    {% endif %}
    {% set s = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set stepper = printer.configfile.settings.stepper_y %}
    _SET_AXIS_CURRENT AXES=Y MODE=homing
    G4 P{ s.clear_time * 1000 }
    G28 Y
    {% if s.y_backoff_distance|float > 0 %}
        G91
        {% if stepper.homing_positive_dir | abs %}
            G0 Y-{s.y_backoff_distance} F{stepper.homing_speed*60}
        {% else %}
            G0 Y{s.y_backoff_distance} F{stepper.homing_speed*60}
        {% endif %}
        G90
    {% endif %}
    _SET_AXIS_CURRENT AXES=Y MODE=run
    G4 P{ s.clear_time * 1000 }
    {% if manage_scaling %}
        _TOGGLE_AXIS_CORRECTION_IF_NEEDED ENABLE=1
    {% endif %}

[gcode_macro _HOME_Z]
gcode:
    {% set manage_scaling = params.MANAGE_SCALING|default(1)|int %}
    {% if manage_scaling %}
        _TOGGLE_AXIS_CORRECTION_IF_NEEDED ENABLE=0
    {% endif %}
    {% set s = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set stepper = printer.configfile.settings.stepper_z %}
    G28 Z
    {% if stepper.homing_positive_dir | abs %}
        G91
        G0 Z-{stepper.homing_retract_dist} F{stepper.homing_speed*60}
        G90
    {% else %}
        G91
        G0 Z+{stepper.homing_retract_dist} F{stepper.homing_speed*60}
        G90
    {% endif %}
    {% if manage_scaling %}
        _TOGGLE_AXIS_CORRECTION_IF_NEEDED ENABLE=1
    {% endif %}

[homing_override]
axes: xyz
set_position_z: 0
gcode:
    # Only toggle scaling once at the start and end
    _TOGGLE_AXIS_CORRECTION_IF_NEEDED ENABLE=0
    {% set s = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    {% set first = s.first_homed_axis|string %}
    {% set second = s.second_homed_axis|string %}
    {% set z_hop = s.z_hop_distance|float %}
    {% set z_speed = printer.configfile.settings.stepper_z.homing_speed * 60 %}
    {% set travel_speed = printer.toolhead.max_velocity * 60 %}
    # Z hop before XY homing, if needed
    {% if z_hop > 0 and 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and first != 'Z' %}
        G0 Z{z_hop} F{z_speed}
    {% endif %}
    # Homing sequence (pass MANAGE_SCALING=0 so axis macros do NOT toggle scaling)
    {% if first == 'X' %}
        {% if home_all or 'X' in params %}_HOME_X MANAGE_SCALING=0{% endif %}
        {% if home_all or 'Y' in params %}_HOME_Y MANAGE_SCALING=0{% endif %}
    {% elif first == 'Y' %}
        {% if home_all or 'Y' in params %}_HOME_Y MANAGE_SCALING=0{% endif %}
        {% if home_all or 'X' in params %}_HOME_X MANAGE_SCALING=0{% endif %}
    {% elif first == 'Z' %}
        {% if home_all or 'Z' in params %}_HOME_Z MANAGE_SCALING=0{% endif %}
        {% if second == 'X' and (home_all or 'X' in params) %}_HOME_X MANAGE_SCALING=0{% endif %}
        {% if second == 'Y' and (home_all or 'Y' in params) %}_HOME_Y MANAGE_SCALING=0{% endif %}
    {% endif %}
    # Safe move before Z homing, if enabled
    {% set safe_z = s.safe_z_enable %}
    {% set safe_x = s.safe_x|float %}
    {% set safe_y = s.safe_y|float %}
    {% set x_max = printer.configfile.settings.stepper_x.position_max %}
    {% set y_max = printer.configfile.settings.stepper_y.position_max %}
    {% if safe_x == -128 %}{% set safe_x = x_max/2 %}{% endif %}
    {% if safe_y == -128 %}{% set safe_y = y_max/2 %}{% endif %}
    {% if safe_z and (home_all or 'Z' in params) and first != 'Z' %}
        G0 X{safe_x} Y{safe_y} F{travel_speed}
    {% endif %}
    # Home Z last if needed
    {% if (home_all or 'Z' in params) and first != 'Z' %}_HOME_Z MANAGE_SCALING=0{% endif %}
    # Re-enable axis correction for normal printing
    _TOGGLE_AXIS_CORRECTION_IF_NEEDED ENABLE=1
